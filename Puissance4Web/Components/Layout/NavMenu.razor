@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Puissance4</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/games">Games</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/create-game">Create Game</NavLink>
                </li>
            </ul>
            <ul class="navbar-nav">
                @if (IsLoggedIn)
                {
                    <li class="nav-item">
                        <button class="btn btn-outline-light btn-sm" @onclick="Logout">
                            Logout
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool IsLoggedIn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Récupérer le token depuis le LocalStorage
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                IsLoggedIn = !string.IsNullOrEmpty(token);
                StateHasChanged(); // Forcer le re-rendu du composant
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error accessing LocalStorage: {ex.Message}");
            }
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        IsLoggedIn = false;
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}