@page "/register"
@using System.Text.RegularExpressions
@using Puissance4API.DTO
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-4">Créer un compte</h1>
        <p class="lead">Choisissez un mot de passe sécurisé pour protéger votre compte.</p>
    </div>

    <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
        <div class="mb-3">
            <label for="login" class="form-label">Nom d'utilisateur</label>
            <InputText id="login" @bind-Value="registerModel.Login" class="form-control"
                placeholder="Entrez votre nom d'utilisateur" />
            <ValidationMessage For="() => registerModel.Login" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Mot de passe</label>
            <InputText id="password" @bind-Value="registerModel.Password" class="form-control"
                placeholder="Entrez votre mot de passe" Type="password" />
            <ValidationMessage For="() => registerModel.Password" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirmez votre mot de passe</label>
            <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control"
                placeholder="Confirmez votre mot de passe" Type="password" />
            <ValidationMessage For="() => registerModel.ConfirmPassword" />
        </div>

        <ul class="list-group mb-3">
            <li class="list-group-item" style="color: @(MeetsLengthRequirement ? "green" : "red")">
                Minimum 8 caractères
            </li>
            <li class="list-group-item" style="color: @(MeetsUpperCaseRequirement ? "green" : "red")">
                Au moins une majuscule
            </li>
            <li class="list-group-item" style="color: @(MeetsLowerCaseRequirement ? "green" : "red")">
                Au moins une minuscule
            </li>
            <li class="list-group-item" style="color: @(MeetsDigitRequirement ? "green" : "red")">
                Au moins un chiffre
            </li>
            <li class="list-group-item" style="color: @(MeetsSpecialCharRequirement ? "green" : "red")">
                Au moins un caractère spécial
            </li>
        </ul>

        <button type="submit" class="btn btn-primary btn-lg w-100" disabled="@(!IsPasswordValid)">S'inscrire</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @ErrorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            @SuccessMessage
        </div>
    }
</div>

@code {
    private RegisterDTO registerModel = new RegisterDTO
        {
            Login = string.Empty,
            Password = string.Empty,
            ConfirmPassword = string.Empty
        };

    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;

    private bool MeetsLengthRequirement => registerModel.Password?.Length >= 8;
    private bool MeetsUpperCaseRequirement => Regex.IsMatch(registerModel.Password ?? "", "[A-Z]");
    private bool MeetsLowerCaseRequirement => Regex.IsMatch(registerModel.Password ?? "", "[a-z]");
    private bool MeetsDigitRequirement => Regex.IsMatch(registerModel.Password ?? "", "\\d");
    private bool MeetsSpecialCharRequirement => Regex.IsMatch(registerModel.Password ?? "", "[^a-zA-Z0-9]");

    private bool IsPasswordValid =>
    MeetsLengthRequirement &&
    MeetsUpperCaseRequirement &&
    MeetsLowerCaseRequirement &&
    MeetsDigitRequirement &&
    MeetsSpecialCharRequirement;

    private async Task HandleRegister()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            ErrorMessage = "Les mots de passe ne correspondent pas.";
            return;
        }

        if (!IsPasswordValid)
        {
            ErrorMessage = "Le mot de passe ne répond pas aux critères de sécurité.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/Players/register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Inscription réussie ! Redirection vers la page de connexion...";
                await Task.Delay(2000); // Attendre avant de rediriger
                Navigation.NavigateTo("/login");
            }
            else
            {
                ErrorMessage = $"Erreur : {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Une erreur est survenue : {ex.Message}";
        }
    }

    public class RegisterDTO
    {
        public string Login { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}