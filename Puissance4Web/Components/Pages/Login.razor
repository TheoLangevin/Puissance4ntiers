@page "/login"

@using Puissance4API.DTO
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
    <div>
        <label>Login:</label>
        <InputText @bind-Value="loginModel.Login" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" Type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

@code {
    private PlayerDTO loginModel = new();
    private string ErrorMessage;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                if (!string.IsNullOrEmpty(token))
                {
                    Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    Navigation.NavigateTo("/console-demo"); // Rediriger si déjà connecté
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to retrieve token: {ex.Message}");
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine($"Sending login: {loginModel.Login}, password: {loginModel.Password}");
            var response = await Http.PostAsJsonAsync("api/Players/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await LocalStorage.SetItemAsync("authToken", result.Token);
                Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);
                Navigation.NavigateTo("/console-demo");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                ErrorMessage = "Invalid login or password.";
            }
            else
            {
                ErrorMessage = $"Unexpected error: {response.StatusCode}, {response.ReasonPhrase}, {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public PlayerResponseDTO Player { get; set; }
    }
}