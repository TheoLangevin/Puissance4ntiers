@page "/login"

@using Puissance4API.DTO
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-4">Connexion</h1>
        <p class="lead">Connectez-vous pour accéder à votre compte et commencer à jouer.</p>
    </div>

    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <div class="mb-3">
            <label for="login" class="form-label">Nom d'utilisateur</label>
            <InputText id="login" @bind-Value="loginModel.Login" class="form-control" placeholder="Entrez votre nom d'utilisateur" />
            <ValidationMessage For="() => loginModel.Login" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Mot de passe</label>
            <InputText id="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Entrez votre mot de passe" Type="password" />
            <ValidationMessage For="() => loginModel.Password" />
        </div>
        <button type="submit" class="btn btn-primary btn-lg w-100">Se connecter</button>
        <div class="text-center mt-3">
            <a href="/register">Pas encore de compte?</a>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @ErrorMessage
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color:red">@ErrorMessage</p>
}

@code {
    private PlayerDTO loginModel = new();
    private string ErrorMessage;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                if (!string.IsNullOrEmpty(token))
                {
                    Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                    Navigation.NavigateTo("/"); // Rediriger si déjà connecté
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to retrieve token: {ex.Message}");
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine($"Sending login: {loginModel.Login}, password: {loginModel.Password}");
            var response = await Http.PostAsJsonAsync("api/Players/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await LocalStorage.SetItemAsync("authToken", result.Token);
                Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);
                Navigation.NavigateTo("/");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                ErrorMessage = "Invalid login or password.";
            }
            else
            {
                ErrorMessage = $"Unexpected error: {response.StatusCode}, {response.ReasonPhrase}, {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public PlayerResponseDTO Player { get; set; }
    }
}